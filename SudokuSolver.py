board = open('board.txt','r').read().strip().split('\n')

for i in range(len(board)):
   board[i] = board[i].split(',')

for i in range(len(board)):
   for j in range(len(board[i])):
      board[i][j] = int(board[i][j])

boxes = {
    (0,0):[(0,1),(0,2),(1,0),(1,1),(1,2),(2,0),(2,1),(2,2)],
    (0,1):[(0,0),(0,2),(1,0),(1,1),(1,2),(2,0),(2,1),(2,2)],
    (0,2):[(0,1),(0,0),(1,0),(1,1),(1,2),(2,0),(2,1),(2,2)],
    (1,0):[(0,1),(0,2),(0,0),(1,1),(1,2),(2,0),(2,1),(2,2)],
    (1,1):[(0,1),(0,2),(1,0),(0,0),(1,2),(2,0),(2,1),(2,2)],
    (1,2):[(0,1),(0,2),(1,0),(1,1),(0,0),(2,0),(2,1),(2,2)],
    (2,0):[(0,1),(0,2),(1,0),(1,1),(1,2),(0,0),(2,1),(2,2)],
    (2,1):[(0,1),(0,2),(1,0),(1,1),(1,2),(2,0),(0,0),(2,2)],
    (2,2):[(0,1),(0,2),(1,0),(1,1),(1,2),(2,0),(2,1),(0,0)],

    (0,3):[(0,4),(0,5),(1,3),(1,4),(1,5),(2,3),(2,4),(2,5)],
    (0,4):[(0,3),(0,5),(1,3),(1,4),(1,5),(2,3),(2,4),(2,5)],
    (0,5):[(0,4),(0,3),(1,3),(1,4),(1,5),(2,3),(2,4),(2,5)],
    (1,3):[(0,4),(0,5),(0,3),(1,4),(1,5),(2,3),(2,4),(2,5)],
    (1,4):[(0,4),(0,5),(1,3),(0,3),(1,5),(2,3),(2,4),(2,5)],
    (1,5):[(0,4),(0,5),(1,3),(1,4),(0,3),(2,3),(2,4),(2,5)],
    (2,3):[(0,4),(0,5),(1,3),(1,4),(1,5),(0,3),(2,4),(2,5)],
    (2,4):[(0,4),(0,5),(1,3),(1,4),(1,5),(2,3),(0,3),(2,5)],
    (2,5):[(0,4),(0,5),(1,3),(1,4),(1,5),(2,3),(2,4),(0,3)],

    (0,6):[(0,7),(0,8),(1,6),(1,7),(1,8),(2,6),(2,7),(2,8)],
    (0,7):[(0,6),(0,8),(1,6),(1,7),(1,8),(2,6),(2,7),(2,8)],
    (0,8):[(0,7),(0,6),(1,6),(1,7),(1,8),(2,6),(2,7),(2,8)],
    (1,6):[(0,7),(0,8),(0,6),(1,7),(1,8),(2,6),(2,7),(2,8)],
    (1,7):[(0,7),(0,8),(1,6),(0,6),(1,8),(2,6),(2,7),(2,8)],
    (1,8):[(0,7),(0,8),(1,6),(1,7),(0,6),(2,6),(2,7),(2,8)],
    (2,6):[(0,7),(0,8),(1,6),(1,7),(1,8),(0,6),(2,7),(2,8)],
    (2,7):[(0,7),(0,8),(1,6),(1,7),(1,8),(2,6),(0,6),(2,8)],
    (2,8):[(0,7),(0,8),(1,6),(1,7),(1,8),(2,6),(2,7),(0,6)],

    (3,0):[(3,1),(3,2),(4,0),(4,1),(4,2),(5,0),(5,1),(5,2)],
    (3,1):[(3,0),(3,2),(4,0),(4,1),(4,2),(5,0),(5,1),(5,2)],
    (3,2):[(3,1),(3,0),(4,0),(4,1),(4,2),(5,0),(5,1),(5,2)],
    (4,0):[(3,1),(3,2),(3,0),(4,1),(4,2),(5,0),(5,1),(5,2)],
    (4,1):[(3,1),(3,2),(4,0),(3,0),(4,2),(5,0),(5,1),(5,2)],
    (4,2):[(3,1),(3,2),(4,0),(4,1),(3,0),(5,0),(5,1),(5,2)],
    (5,0):[(3,1),(3,2),(4,0),(4,1),(4,2),(3,0),(5,1),(5,2)],
    (5,1):[(3,1),(3,2),(4,0),(4,1),(4,2),(5,0),(3,0),(5,2)],
    (5,2):[(3,1),(3,2),(4,0),(4,1),(4,2),(5,0),(5,1),(3,0)],

    (3,3):[(3,4),(3,5),(4,3),(4,4),(4,5),(5,3),(5,4),(5,5)],
    (3,4):[(3,3),(3,5),(4,3),(4,4),(4,5),(5,3),(5,4),(5,5)],
    (3,5):[(3,4),(3,3),(4,3),(4,4),(4,5),(5,3),(5,4),(5,5)],
    (4,3):[(3,4),(3,5),(3,3),(4,4),(4,5),(5,3),(5,4),(5,5)],
    (4,4):[(3,4),(3,5),(4,3),(3,3),(4,5),(5,3),(5,4),(5,5)],
    (4,5):[(3,4),(3,5),(4,3),(4,4),(3,3),(5,3),(5,4),(5,5)],
    (5,3):[(3,4),(3,5),(4,3),(4,4),(4,5),(3,3),(5,4),(5,5)],
    (5,4):[(3,4),(3,5),(4,3),(4,4),(4,5),(5,3),(3,3),(5,5)],
    (5,5):[(3,4),(3,5),(4,3),(4,4),(4,5),(5,3),(5,4),(3,3)],

    (3,6):[(3,7),(3,8),(4,6),(4,7),(4,8),(5,6),(5,7),(5,8)],
    (3,7):[(3,6),(3,8),(4,6),(4,7),(4,8),(5,6),(5,7),(5,8)],
    (3,8):[(3,7),(3,6),(4,6),(4,7),(4,8),(5,6),(5,7),(5,8)],
    (4,6):[(3,7),(3,8),(3,6),(4,7),(4,8),(5,6),(5,7),(5,8)],
    (4,7):[(3,7),(3,8),(4,6),(3,6),(4,8),(5,6),(5,7),(5,8)],
    (4,8):[(3,7),(3,8),(4,6),(4,7),(3,6),(5,6),(5,7),(5,8)],
    (5,6):[(3,7),(3,8),(4,6),(4,7),(4,8),(3,6),(5,7),(5,8)],
    (5,7):[(3,7),(3,8),(4,6),(4,7),(4,8),(5,6),(3,6),(5,8)],
    (5,8):[(3,7),(3,8),(4,6),(4,7),(4,8),(5,6),(5,7),(3,6)],

    (6,0):[(6,1),(6,2),(7,0),(7,1),(7,2),(8,0),(8,1),(8,2)],
    (6,1):[(6,0),(6,2),(7,0),(7,1),(7,2),(8,0),(8,1),(8,2)],
    (6,2):[(6,1),(6,0),(7,0),(7,1),(7,2),(8,0),(8,1),(8,2)],
    (7,0):[(6,1),(6,2),(6,0),(7,1),(7,2),(8,0),(8,1),(8,2)],
    (7,1):[(6,1),(6,2),(7,0),(6,0),(7,2),(8,0),(8,1),(8,2)],
    (7,2):[(6,1),(6,2),(7,0),(7,1),(6,0),(8,0),(8,1),(8,2)],
    (8,0):[(6,1),(6,2),(7,0),(7,1),(7,2),(6,0),(8,1),(8,2)],
    (8,1):[(6,1),(6,2),(7,0),(7,1),(7,2),(8,0),(6,0),(8,2)],
    (8,2):[(6,1),(6,2),(7,0),(7,1),(7,2),(8,0),(8,1),(6,0)],

    (6,3):[(6,4),(6,5),(7,3),(7,4),(7,5),(8,3),(8,4),(8,5)],
    (6,4):[(6,3),(6,5),(7,3),(7,4),(7,5),(8,3),(8,4),(8,5)],
    (6,5):[(6,4),(6,3),(7,3),(7,4),(7,5),(8,3),(8,4),(8,5)],
    (7,3):[(6,4),(6,5),(6,3),(7,4),(7,5),(8,3),(8,4),(8,5)],
    (7,4):[(6,4),(6,5),(7,3),(6,3),(7,5),(8,3),(8,4),(8,5)],
    (7,5):[(6,4),(6,5),(7,3),(7,4),(6,3),(8,3),(8,4),(8,5)],
    (8,3):[(6,4),(6,5),(7,3),(7,4),(7,5),(6,3),(8,4),(8,5)],
    (8,4):[(6,4),(6,5),(7,3),(7,4),(7,5),(8,3),(6,3),(8,5)],
    (8,5):[(6,4),(6,5),(7,3),(7,4),(7,5),(8,3),(8,4),(6,3)],

    (6,6):[(6,7),(6,8),(7,6),(7,7),(7,8),(8,6),(8,7),(8,8)],
    (6,7):[(6,6),(6,8),(7,6),(7,7),(7,8),(8,6),(8,7),(8,8)],
    (6,8):[(6,7),(6,6),(7,6),(7,7),(7,8),(8,6),(8,7),(8,8)],
    (7,6):[(6,7),(6,8),(6,6),(7,7),(7,8),(8,6),(8,7),(8,8)],
    (7,7):[(6,7),(6,8),(7,6),(6,6),(7,8),(8,6),(8,7),(8,8)],
    (7,8):[(6,7),(6,8),(7,6),(7,7),(6,6),(8,6),(8,7),(8,8)],
    (8,6):[(6,7),(6,8),(7,6),(7,7),(7,8),(6,6),(8,7),(8,8)],
    (8,7):[(6,7),(6,8),(7,6),(7,7),(7,8),(8,6),(6,6),(8,8)],
    (8,8):[(6,7),(6,8),(7,6),(7,7),(7,8),(8,6),(8,7),(6,6)]

   }

#inspiration to display the board in this format from TechWithTim. Nothing else was inspired by him
def display(board):
  for i in range(len(board)):
    if i % 3 == 0 and i != 0:
        print('---------------------')
    for j in range(len(board[i])):
        if j % 3 == 0 and j != 0:
            print('|', end = " ")
        print(board[i][j],end = " ")
    print()

print("Unsolved")
display(board)


changed = []

def validEntry(board,value,y,x):
  #check horizontally
    for v in range(9):
      if v == x:
         continue
      else:
         if board[y][v] == value:
            return False
  #check vertically
    for v in range(9):
      if v == y:
        continue
      else:
        if board[v][x] == value:
          return False

    for v in boxes[(y,x)]:
      if board[v[0]][v[1]] == value:
        return False
    return True

i = 0
j = 0

def findLowestNum(board,val,i,j):
    for v in range(val+1,10):
      if validEntry(board,v,i,j):
         return v
    return 0

def backtrack():
  removedFromChanged = []
  while findLowestNum(board,changed[-1][2],changed[-1][0],changed[-1][1]) == 0:
    
    removedFromChanged.append(changed[-1])
    del(changed[-1])  



  for s in removedFromChanged:
     board[s[0]][s[1]] = 0       
  changed[-1][2] = findLowestNum(board,changed[-1][2],changed[-1][0],changed[-1][1])
  i,j = changed[-1][0],changed[-1][1]
  board[i][j] = changed[-1][2]
  if j == 8:
     return (i+1,0)
  else:
     return(i,j)
  
 


def solve():
   i = 0
   j = 0
   while i < 9:
      while j < 9:
        if board[i][j] == 0:
          val = findLowestNum(board,0,i,j)
          if val == 0:
             coords = backtrack()
             i = coords[0]
             j = coords[1]
          else:
             board[i][j] = val
             changed.append([i,j,val])
          


        j += 1
      j = 0
      i += 1

solve()
print('\n')
print("Solved")
display(board)
