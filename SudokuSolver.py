board = [
   [8,0,6,0,0,2,0,0,1],
   [2,0,0,0,8,4,9,0,3],
   [0,0,0,5,0,9,0,0,6],
   [0,0,3,9,5,0,0,2,0],
   [0,7,1,4,2,0,0,0,0],
   [9,2,0,1,0,0,7,5,0],
   [4,5,7,0,9,0,3,0,0],
   [3,6,2,7,4,1,8,9,5],
   [1,0,0,2,3,5,4,6,0]]

#This is going to be used to determine which numbers are in which box. This will be needed when implementing the backtracking algorithm
boxes = {
#box 1, the one in the top left
    (0,0):[(0,1),(0,2),(1,0),(1,1),(1,2),(2,0),(2,1),(2,2)],
    (0,1):[(0,0),(0,2),(1,0),(1,1),(1,2),(2,0),(2,1),(2,2)],
    (0,2):[(0,1),(0,0),(1,0),(1,1),(1,2),(2,0),(2,1),(2,2)],
    (1,0):[(0,1),(0,2),(0,0),(1,1),(1,2),(2,0),(2,1),(2,2)],
    (1,1):[(0,1),(0,2),(1,0),(0,0),(1,2),(2,0),(2,1),(2,2)],
    (1,2):[(0,1),(0,2),(1,0),(1,1),(0,0),(2,0),(2,1),(2,2)],
    (2,0):[(0,1),(0,2),(1,0),(1,1),(1,2),(0,0),(2,1),(2,2)],
    (2,1):[(0,1),(0,2),(1,0),(1,1),(1,2),(2,0),(0,0),(2,2)],
    (2,2):[(0,1),(0,2),(1,0),(1,1),(1,2),(2,0),(2,1),(0,0)],

#box 2, the one in the top middle
    (0,3):[(0,4),(0,5),(1,3),(1,4),(1,5),(2,3),(2,4),(2,5)],
    (0,4):[(0,3),(0,5),(1,3),(1,4),(1,5),(2,3),(2,4),(2,5)],
    (0,5):[(0,4),(0,3),(1,3),(1,4),(1,5),(2,3),(2,4),(2,5)],
    (1,3):[(0,4),(0,5),(0,3),(1,4),(1,5),(2,3),(2,4),(2,5)],
    (1,4):[(0,4),(0,5),(1,3),(0,3),(1,5),(2,3),(2,4),(2,5)],
    (1,5):[(0,4),(0,5),(1,3),(1,4),(0,3),(2,3),(2,4),(2,5)],
    (2,3):[(0,4),(0,5),(1,3),(1,4),(1,5),(0,3),(2,4),(2,5)],
    (2,4):[(0,4),(0,5),(1,3),(1,4),(1,5),(2,3),(0,3),(2,5)],
    (2,5):[(0,4),(0,5),(1,3),(1,4),(1,5),(2,3),(2,4),(0,3)],

#box 3, the one in the top right
    (0,6):[(0,7),(0,8),(1,6),(1,7),(1,8),(2,6),(2,7),(2,8)],
    (0,7):[(0,6),(0,8),(1,6),(1,7),(1,8),(2,6),(2,7),(2,8)],
    (0,8):[(0,7),(0,6),(1,6),(1,7),(1,8),(2,6),(2,7),(2,8)],
    (1,6):[(0,7),(0,8),(0,6),(1,7),(1,8),(2,6),(2,7),(2,8)],
    (1,7):[(0,7),(0,8),(1,6),(0,6),(1,8),(2,6),(2,7),(2,8)],
    (1,8):[(0,7),(0,8),(1,6),(1,7),(0,6),(2,6),(2,7),(2,8)],
    (2,6):[(0,7),(0,8),(1,6),(1,7),(1,8),(0,6),(2,7),(2,8)],
    (2,7):[(0,7),(0,8),(1,6),(1,7),(1,8),(2,6),(0,6),(2,8)],
    (2,8):[(0,7),(0,8),(1,6),(1,7),(1,8),(2,6),(2,7),(0,6)],

#box 4, the one in the middle left
    (3,0):[(3,1),(3,2),(4,0),(4,1),(4,2),(5,0),(5,1),(5,2)],
    (3,1):[(3,0),(3,2),(4,0),(4,1),(4,2),(5,0),(5,1),(5,2)],
    (3,2):[(3,1),(3,0),(4,0),(4,1),(4,2),(5,0),(5,1),(5,2)],
    (4,0):[(3,1),(3,2),(3,0),(4,1),(4,2),(5,0),(5,1),(5,2)],
    (4,1):[(3,1),(3,2),(4,0),(3,0),(4,2),(5,0),(5,1),(5,2)],
    (4,2):[(3,1),(3,2),(4,0),(4,1),(3,0),(5,0),(5,1),(5,2)],
    (5,0):[(3,1),(3,2),(4,0),(4,1),(4,2),(3,0),(5,1),(5,2)],
    (5,1):[(3,1),(3,2),(4,0),(4,1),(4,2),(5,0),(3,0),(5,2)],
    (5,2):[(3,1),(3,2),(4,0),(4,1),(4,2),(5,0),(5,1),(3,0)],

#box 5, the one in the dead center
    (3,3):[(3,4),(3,5),(4,3),(4,4),(4,5),(5,3),(5,4),(5,5)],
    (3,4):[(3,3),(3,5),(4,3),(4,4),(4,5),(5,3),(5,4),(5,5)],
    (3,5):[(3,4),(3,3),(4,3),(4,4),(4,5),(5,3),(5,4),(5,5)],
    (4,3):[(3,4),(3,5),(3,3),(4,4),(4,5),(5,3),(5,4),(5,5)],
    (4,4):[(3,4),(3,5),(4,3),(3,3),(4,5),(5,3),(5,4),(5,5)],
    (4,5):[(3,4),(3,5),(4,3),(4,4),(3,3),(5,3),(5,4),(5,5)],
    (5,3):[(3,4),(3,5),(4,3),(4,4),(4,5),(3,3),(5,4),(5,5)],
    (5,4):[(3,4),(3,5),(4,3),(4,4),(4,5),(5,3),(3,3),(5,5)],
    (5,5):[(3,4),(3,5),(4,3),(4,4),(4,5),(5,3),(5,4),(3,3)],

#box 6, the one in the center right
    (3,6):[(3,7),(3,8),(4,6),(4,7),(4,8),(5,6),(5,7),(5,8)],
    (3,7):[(3,6),(3,8),(4,6),(4,7),(4,8),(5,6),(5,7),(5,8)],
    (3,8):[(3,7),(3,6),(4,6),(4,7),(4,8),(5,6),(5,7),(5,8)],
    (4,6):[(3,7),(3,8),(3,6),(4,7),(4,8),(5,6),(5,7),(5,8)],
    (4,7):[(3,7),(3,8),(4,6),(3,6),(4,8),(5,6),(5,7),(5,8)],
    (4,8):[(3,7),(3,8),(4,6),(4,7),(3,6),(5,6),(5,7),(5,8)],
    (5,6):[(3,7),(3,8),(4,6),(4,7),(4,8),(3,6),(5,7),(5,8)],
    (5,7):[(3,7),(3,8),(4,6),(4,7),(4,8),(5,6),(3,6),(5,8)],
    (5,8):[(3,7),(3,8),(4,6),(4,7),(4,8),(5,6),(5,7),(3,6)],

#box 7, the one in the botton left
    (6,0):[(6,1),(6,2),(7,0),(7,1),(7,2),(8,0),(8,1),(8,2)],
    (6,1):[(6,0),(6,2),(7,0),(7,1),(7,2),(8,0),(8,1),(8,2)],
    (6,2):[(6,1),(6,0),(7,0),(7,1),(7,2),(8,0),(8,1),(8,2)],
    (7,0):[(6,1),(6,2),(6,0),(7,1),(7,2),(8,0),(8,1),(8,2)],
    (7,1):[(6,1),(6,2),(7,0),(6,0),(7,2),(8,0),(8,1),(8,2)],
    (7,2):[(6,1),(6,2),(7,0),(7,1),(6,0),(8,0),(8,1),(8,2)],
    (8,0):[(6,1),(6,2),(7,0),(7,1),(7,2),(6,0),(8,1),(8,2)],
    (8,1):[(6,1),(6,2),(7,0),(7,1),(7,2),(8,0),(6,0),(8,2)],
    (8,2):[(6,1),(6,2),(7,0),(7,1),(7,2),(8,0),(8,1),(6,0)],

#box 8, the one in the bottom center
    (6,3):[(6,4),(6,5),(7,3),(7,4),(7,5),(8,3),(8,4),(8,5)],
    (6,4):[(6,3),(6,5),(7,3),(7,4),(7,5),(8,3),(8,4),(8,5)],
    (6,5):[(6,4),(6,3),(7,3),(7,4),(7,5),(8,3),(8,4),(8,5)],
    (7,3):[(6,4),(6,5),(6,3),(7,4),(7,5),(8,3),(8,4),(8,5)],
    (7,4):[(6,4),(6,5),(7,3),(6,3),(7,5),(8,3),(8,4),(8,5)],
    (7,5):[(6,4),(6,5),(7,3),(7,4),(6,3),(8,3),(8,4),(8,5)],
    (8,3):[(6,4),(6,5),(7,3),(7,4),(7,5),(6,3),(8,4),(8,5)],
    (8,4):[(6,4),(6,5),(7,3),(7,4),(7,5),(8,3),(6,3),(8,5)],
    (8,5):[(6,4),(6,5),(7,3),(7,4),(7,5),(8,3),(8,4),(6,3)],

#box 9, the one in the bottom right
    (6,6):[(6,7),(6,8),(7,6),(7,7),(7,8),(8,6),(8,7),(8,8)],
    (6,7):[(6,6),(6,8),(7,6),(7,7),(7,8),(8,6),(8,7),(8,8)],
    (6,8):[(6,7),(6,6),(7,6),(7,7),(7,8),(8,6),(8,7),(8,8)],
    (7,6):[(6,7),(6,8),(6,6),(7,7),(7,8),(8,6),(8,7),(8,8)],
    (7,7):[(6,7),(6,8),(7,6),(6,6),(7,8),(8,6),(8,7),(8,8)],
    (7,8):[(6,7),(6,8),(7,6),(7,7),(6,6),(8,6),(8,7),(8,8)],
    (8,6):[(6,7),(6,8),(7,6),(7,7),(7,8),(6,6),(8,7),(8,8)],
    (8,7):[(6,7),(6,8),(7,6),(7,7),(7,8),(8,6),(6,6),(8,8)],
    (8,8):[(6,7),(6,8),(7,6),(7,7),(7,8),(8,6),(8,7),(6,6)]

   }

#inspiration to display the board in this format from TechWithTim. Nothing else was inspired by him
def display(board):
  for i in range(len(board)):
    if i % 3 == 0 and i != 0:
        print('---------------------')
    for j in range(len(board[i])):
        if j % 3 == 0 and j != 0:
            print('|', end = " ")
        print(board[i][j],end = " ")
    print()

display(board)


tried = []

def valid(board,value,y,x):
  #check horizontally
    for v in range(9):
      if v == x:
         continue
      else:
         if board[y][v] == value:
            return False
  #check vertically
    for v in range(9):
      if v == y:
        continue
      else:
        if board[v][x] == value:
          return False

    for v in boxes[(y,x)]:
      if board[v[0]][v[1]] == value:
        return False
    return True

i = 0
j = 0

#cant name it try due to it being a keyword

#finds the lowest possible usable value at the given position
def Try(board,val,i,j):
    for v in range(val+1,10):
      if valid(board,v,i,j):
         return v
    return 0


#while the last thing in tried doesnt work at all it keeps removing it and going back

#after it removes all the ones that dont work it fixes the last one

#after that it tells the program where to continue i and j from

def fixLast():
  print(tried)
  removed = []
  while Try(board,tried[-1][2],tried[-1][0],tried[-1][1]) == 0:
    
    #while there is no valid entree for the last thing in tried, ie we cant make it work we keep going back
    removed.append(tried[-1])
    del(tried[-1])
    print(tried)
  
  #time to set all removed things to 0
  for s in removed:
     board[s[0]][s[1]] = 0       
  print('tried is', tried)         
  tried[-1][2] = Try(board,tried[-1][2],tried[-1][0],tried[-1][1])
  i,j = tried[-1][0],tried[-1][1]
  board[i][j] = tried[-1][2]
  print("returning",i,j,tried[-1][2])
  if j == 8:
     return (i+1,0)
  else:
     return(i,j)
  
 


#the actual solver

def backTrack():
   i = 0
   j = 0
   while i < 9:
      while j < 9:
        print("i and j are",i,j)
        print('\n\n')
        display(board)
        print('\n\n')
        if board[i][j] == 0:
          val = Try(board,0,i,j)
          if val == 0:
             print('Fixlast called at', i,j)
             coords = fixLast()
             i = coords[0]
             j = coords[1]
          else:
             board[i][j] = val
             print("Assigned a value of",val, "to the coords", i,j)
             tried.append([i,j,val])
          


      #makes it so that i and j are not infinite loops
        j += 1
      j = 0
      i += 1

#Makes program start
backTrack()
print('\n\n\n')
display(board)
      

'''
How to recreate the backtracking algorithm:

start iterating through the list until you find a 0

after finding the first 0 keep adding 1 to it until it is a valid entree, or until it is 9

if it is a valid entree keep going until you find the next 0

if it is equal to 9 then you have to start again from 0 and then go back the the last number you chose

keep adding 1 to the last number you chose until it is valid or equal to 9

if it is valid change it to that number then continue changing the rest

if it is 9 go back to the number you chose before

keep adding 1 to it until it is valid or 9
'''

